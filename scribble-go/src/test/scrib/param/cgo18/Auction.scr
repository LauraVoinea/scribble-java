//Raymond@HZHL3 ~/code/eclipse/scribble/github.com/rhu1-go/scribble-java
//$ bin/scribblec-param.sh -ip scribble-go/src/test/scrib/ -d scribble-go/src/test/scrib/ scribble-go/src/test/scrib/param/cgo18/Auction.scr -param Proto1

module param.cgo18.Auction;


type <go> "int" from "..." as int;


//*
global protocol Proto1(role A(n), role B(n))
{
	bid(int) from B[1..n] to A[1..1];

	do X(A, B);
}

// mu X
aux global protocol X(role A, role B)
{
	choice at A[1]
	{	
		highestBidSoFar(int) from A[1..1] to B[1..n];	

		choices at B[i:1..n]
		{
			bid(int) from B[i] to A[1..1];
			do X(A, B);
		}
		or
		{
			skip(int) from B[i] to A[1..1];
			do X(A, B);
		}
	}
	or
	{
		winner() from A[1..1] to B[1..n];
	}
}
//*/








/*
// mu X
aux global protocol X(role A, role B(n))
{
	choice at A[1]
	{	
		highestbid(int) from A[1..1] to B[1..n];	

		/* // If "directly" corresponding to formalism
		wigglychoice at B[i:1..n] 
		{
			bid(int) wigglyarrow B[i] to A[1..1];
		}
		or
		{
			skip(int) wigglyarrow B[i] to A[1..1];
		}*/

		// Version to implement
		/*foreach (i: 1..n)
		{
			choice at B[i]* /
			choices at B[i:1..n]
			{
				bid(int) from B[i] to A[1..1];
				do X(A, B);
			}
			or
			{
				skip(int) from B[i] to A[1..1];
				do X(A, B);
			}
		//}

		// "Traditional MPST" solution
		//bidOrSkip(int) from B[1..n] to A[1..1];

		//do X(A, B);
	}
	or
	{
		winner() from A[1..1] to B[1..n];
	}
}
//*/
